
import SwiftUI

struct GameView: View {
    @StateObject private var viewModel: GameViewModel
    @State private var timeRemaining = 100
    @State private var timer: Timer?
    @Namespace private var animationNamespace
    @Binding var isLevelCompleted: Bool

    init(selectedLevel: GameLevel, isSE: Bool, isLevelCompleted: Binding<Bool>) {
        _viewModel = StateObject(wrappedValue: GameViewModel(selectedLevel: selectedLevel, isSE: isSE))
        _isLevelCompleted = isLevelCompleted
    }
    
    var body: some View {
        ZStack {
            Image("Slot-1") // –ó–∞–¥–∞—î–º–æ –≤–∞—à–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ñ–æ–Ω—É
                .resizable()
                .scaledToFill() // –ó–∞–ø–æ–≤–Ω—é—î–º–æ –¥–æ—Å—Ç—É–ø–Ω–∏–π –ø—Ä–æ—Å—Ç—ñ—Ä
                .ignoresSafeArea()
                .opacity(0.5) // –ú–æ–∂–Ω–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –ø—Ä–æ–∑–æ—Ä—ñ—Å—Ç—å, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
            
            VStack {
                Text("‚ú® Match 3 Game ‚ú®")
                    .font(.custom("Chalkduster", size: 32))
                    .foregroundColor(.white)
                    .padding()
                
                HStack {
                    Text("‚è± Time: \(timeRemaining)")
                        .font(.title2)
                        .foregroundColor(.white)
                    Spacer()
                    Text("üèÜ Score: \(viewModel.score)")
                        .font(.title2)
                        .foregroundColor(.white)
                }
                .padding(.horizontal)
                
                Spacer()
                Spacer(minLength: 100)
                
                HStack(alignment: .center) {
                    
                    Spacer()

                    
                    GeometryReader { geometry in
                        let totalPadding: CGFloat = 4 // –í—ñ–¥—Å—Ç—É–ø –∑ —É—Å—ñ—Ö –±–æ–∫—ñ–≤
                            let spacing: CGFloat = 3 // –í—ñ–¥—Å—Ç–∞–Ω—å –º—ñ–∂ –∫–ª—ñ—Ç–∏–Ω–∫–∞–º–∏
//                            let boardWidth = min(geometry.size.width - totalPadding * 2, geometry.size.height) * 0.8 // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —à–∏—Ä–∏–Ω—É –∑ –≤—ñ–¥—Å—Ç—É–ø–∞–º–∏
//                            let boardHeight = min(geometry.size.height - totalPadding * 2, geometry.size.width) * 0.8 // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –≤–∏—Å–æ—Ç—É –∑ –≤—ñ–¥—Å—Ç—É–ø–∞–º–∏

                            // –û–±—á–∏—Å–ª–µ–Ω–Ω—è cellSize
                            //let cellWidth = (boardWidth - (CGFloat(game.columns - 1) * spacing)) / CGFloat(game.columns) // –†–æ–∑–º—ñ—Ä –∫–ª—ñ—Ç–∏–Ω–∫–∏ –ø–æ —à–∏—Ä–∏–Ω—ñ
                            //let cellHeight = (boardHeight - (CGFloat(game.rows - 1) * spacing)) / CGFloat(game.rows) // –†–æ–∑–º—ñ—Ä –∫–ª—ñ—Ç–∏–Ω–∫–∏ –ø–æ –≤–∏—Å–æ—Ç—ñ

                            // –û–±—á–∏—Å–ª–µ–Ω–Ω—è adjustedBoardSize –¥–ª—è —à–∏—Ä–∏–Ω–∏ —Ç–∞ –≤–∏—Å–æ—Ç–∏
                            //let adjustedBoardWidth = cellWidth * CGFloat(game.columns) + (CGFloat(game.columns - 1) * spacing) + totalPadding * 2
                           // let adjustedBoardHeight = cellHeight * CGFloat(game.rows) + (CGFloat(game.rows - 1) * spacing) + totalPadding * 2

                            // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ adjustedBoardWidth —ñ adjustedBoardHeight –¥–ª—è background
                        GridView(game: viewModel, namespace: animationNamespace, size: UIScreen.main.bounds.width - 40)
                                .padding(totalPadding) // –í—ñ–¥—Å—Ç–∞–Ω—å –º—ñ–∂ –±–æ—Ä–¥–æ–º —Ç–∞ —Ñ–æ–Ω–æ–º
                                .background(
                                    Image("bgfedfrg") // –í–∞—à–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ñ–æ–Ω—É
                                        .resizable()
                                        .scaledToFill()
                                        .frame(width: UIScreen.main.bounds.width - 20, height: UIScreen.main.bounds.width + 330) // –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–æ–∑–º—ñ—Ä—É —Ñ–æ–Ω—É
                                        .clipped() // –û–±—Ä—ñ–∑–∞—î–º–æ, —â–æ–± –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ —Ä–æ–∑–º—ñ—Ä–∞–º
                                )
                                .cornerRadius(25)
                                .shadow(radius: 5)
                    }
                }
                
                Button(action: {
                    viewModel.resetGame()
                    resetTimer()
                }) {
                    Text("Restart")
                        .font(.title2)
                        .fontWeight(.bold)
                        .padding()
                        .background(LinearGradient(gradient: Gradient(colors: [.yellow, .orange]), startPoint: .leading, endPoint: .trailing))
                        .foregroundColor(.white)
                        .cornerRadius(10)
                        .shadow(radius: 5)
                }
            }
        }
        .onAppear {
            startTimer()
        }
        .onDisappear {
            timer?.invalidate()
        }
    }
    
    func startTimer() {
        timeRemaining = 100
        timer = Timer.scheduledTimer(withTimeInterval: 1, repeats: true) { _ in
            if self.timeRemaining > 0 {
                self.timeRemaining -= 1
            } else {
                timer?.invalidate()
                // Actions when the game ends
            }
        }
    }
    
    func resetTimer() {
        timer?.invalidate()
        startTimer()
    }
}



struct GridView: View {
    @ObservedObject var game: GameViewModel
    var namespace: Namespace.ID
    var size: CGFloat
    
    var body: some View {
        let cellSize = (size - (CGFloat(game.columns) * 3)) / CGFloat(game.columns) // –í—Ä–∞—Ö–æ–≤—É–π—Ç–µ padding –º—ñ–∂ –∫–ª—ñ—Ç–∏–Ω–∫–∞–º–∏
        
        VStack(spacing: 0) {
            ForEach(0..<game.rows, id: \.self) { row in
                HStack(spacing: 0) {
                    ForEach(0..<game.columns, id: \.self) { column in
                        let ball = game.grid[row][column]
                        Image(ball.imageName)
                            .resizable()
                            .scaledToFit()
                            .frame(width: cellSize, height: cellSize)
                            .shadow(radius: 3)
                            .padding(3) // –í–Ω—É—Ç—Ä—ñ—à–Ω—ñ–π –≤—ñ–¥—Å—Ç—É–ø
                            .overlay(
                                ZStack {
                                    if ball.isShaking {
                                        Circle()
                                            .stroke(Color.white, lineWidth: 2)
                                            .modifier(ShakeEffect(shakes: 2))
                                    }
                                    if ball.isHinted {
                                        Circle()
                                            .stroke(Color.yellow, lineWidth: 3)
                                            .animation(.easeInOut)
                                    }
                                }
                            )
                            .matchedGeometryEffect(id: ball.id, in: namespace)
                            .onTapGesture {
                                game.selectCell(row: row, column: column)
                            }
                            .transition(.move(edge: .top))
                            .animation(.spring(), value: ball.id)
                    }
                }
            }
        }
    }
}
